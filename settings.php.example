<?php

declare(strict_types=1);

use Lits\Config\CsvConfig;
use Lits\Config\FrameworkConfig;
use Lits\Config\PresentationConfig;
use Lits\Config\SessionConfig;
use Lits\Config\TemplateConfig;
use Lits\Framework;

return function (Framework $framework): void {
    $settings = $framework->settings();

    assert($settings['framework'] instanceof FrameworkConfig);

    // Whether to enable debug information.
    // $settings['framework']->debug = false;

    // Path to log file to be generated by the application.
    // $settings['framework']->log = '';

    assert($settings['session'] instanceof SessionConfig);

    // Base64 encoded key with at least 32-bits of entropy. Required.
    // $settings['session']->key = '';

    // Seconds before a session will expire.
    // $settings['session']->expires = 3600;

    assert($settings['template'] instanceof TemplateConfig);

    // Path to cache directory, which must be writable.
    $settings['template']->cache = __DIR__ . DIRECTORY_SEPARATOR . 'cache';

    // Paths to search for template files.
    // $settings['template']->paths[] = '';

    // Name of the site.
    $settings['template']->site = 'IIIF Presentations';

    // HTML contact information for the site.
    // $settings['template']->contact = '';

    // Menu for the site.
    // $settings['template']->menu = [];

    assert($settings['csv'] instanceof CsvConfig);

    // Which row of CSV file contains the header, zero indexed.
    // If there is no header, use null.
    // $settings['csv']->header = 0;

    // Which column of the CSV file contains a unique ID for each page which
    // can be sent to the IIIF Image API server to retrieve that page image.
    // $settings['csv']->id = 'Asset ID(s)';

    // Which column of the CSV file contains a title used to sort pages.
    // Each page within a document must have the same value in this field, but
    // a different value than other documents. This value will also be used
    // for naming the presentation created for each document.
    // $settings['csv']->title = 'Title';

    // Which column of the CSV file contains a collection name used to sort
    // presentations.
    // $settings['csv']->collection = 'Is Part Of';

    // Which column of the CSV file contains the page labels to use instead of
    // sequential integers starting at one.
    // $settings['csv']->label = 'Caption';

    // Which column of the CSV file contains the path to the image in host
    // system including the filename with extension.
    // $settings['csv']->path = 'ZDam Path';

    // Which column of the CSV can be used to sort pages in a document.
    // $settings['csv']->sort = 'Original filename';

    // Which columns of the CSV should be loaded into named metadata fields.
    // The same named metadata field may be used repeatedly to load data from
    // whichever CSV column has been specified.
    // $settings['csv']->metadata = [ ... ];

    assert($settings['presentation'] instanceof PresentationConfig);

    // Path to output presentation data to, must be writable. Required.
    $settings['presentation']->path = __DIR__ . DIRECTORY_SEPARATOR . 'data';

    // URL where the public directory is available. Required.
    // $settings['presentation']->url = '';

    // URL to IIIF Image API server which supports retrieval by IDs. Required.
    // $settings['presentation']->image = '';

    // Key to be added when fetching from the IIIF Image API server.
    // $settings['presentation']->key = '';

    // Extension to be used when fetching from the IIIF Image API server.
    // If left the default of null, the extension will be determined from
    // the CSV path specified above.
    // $settings['presentation']->ext = '';

    // Size of image to request when fetching from the IIIF Image API server.
    // $settings['presentation']->size = '';

    // Metadata field to use as the presentation manifest label.
    // $settings['presentation']->label = 'Title';

    // Metadata field to use as the presentation manifest description.
    // $settings['presentation']->description = 'Description';

    // Metadata field to use as the presentation manifest rights.
    // $settings['presentation']->rights = 'Rights';
};
